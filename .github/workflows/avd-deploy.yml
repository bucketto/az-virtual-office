name: Deploy AVD

on:
  workflow_dispatch:
    inputs:
      resource_group_name:
        description: "Nombre del Resource Group"
        required: true
        default: "RG-AVD-Prod"
      host_pool_name:
        description: "Nombre del Host Pool"
        required: true
        default: "AVD-Pool-Prod"
      total_users:
        description: "Número total de usuarios concurrentes"
        required: true
        default: "2"
      user_upns:
        description: "Lista de UPNs de usuario o grupos AAD (separados por comas)"
        required: false
        default: ""

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: github-pages

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Debug Mostrar contenido del repositorio
        run: |
          echo "=== Directorio de trabajo ==="
          pwd
          echo "=== Listado recursivo de archivos ==="
          ls -R .

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.3.6"

      - name: Debug Revisar que exista el secret AZURE_CREDENTIALS
        run: |
          if [ -z "${{ secrets.AZURE_CREDENTIALS }}" ]; then
            echo "ERROR: El secret AZURE_CREDENTIALS está vacío o no existe."
            exit 1
          else
            echo "✅ AZURE_CREDENTIALS está presente (oculto por seguridad)."
          fi
        shell: bash

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Debug Comprobar variables de entorno de Azure
        run: |
          echo "ARM_CLIENT_ID=${ARM_CLIENT_ID}"
          echo "ARM_SUBSCRIPTION_ID=${ARM_SUBSCRIPTION_ID}"
          echo "ARM_TENANT_ID=${ARM_TENANT_ID}"
          # No mostramos ARM_CLIENT_SECRET por seguridad

      - name: Terraform Init
        run: terraform init -input=false

      - name: Terraform Plan
        run: |
          terraform plan \
            -input=false \
            -var="resource_group_name=${{ github.event.inputs.resource_group_name }}" \
            -var="host_pool_name=${{ github.event.inputs.host_pool_name }}" \
            -var="total_users=${{ github.event.inputs.total_users }}" \
            -var="user_upns=${{ github.event.inputs.user_upns }}" \
            -out=tfplan

      - name: Debug Mostrar el plan
        if: always()
        run: |
          terraform show tfplan

      - name: Terraform Apply
        if: success()
        run: terraform apply -input=false -auto-approve tfplan
